[{"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/index.js":"1","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/reportWebVitals.js":"2","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/App.js":"3","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Navbar.js":"4","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Main.js":"5","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/index.js":"6","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Aggregate.js":"7","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Map.js":"8","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Allocation.js":"9","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Homepage.js":"10","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/actions/actions.js":"11","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/reducers/reducers.js":"12","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/DistrictComponent.js":"13","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/LabComponent.js":"14","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/MapSupp.js":"15","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/loader.js":"16","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/info.js":"17","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/actions/api.js":"18","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/reducers/currentState.js":"19","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/MapChart.js":"20","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/filterFormAllocation.js":"21","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/filterFormAggregate.js":"22","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Error.js":"23"},{"size":511,"mtime":1607675515694,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1607675515694,"results":"26","hashOfConfig":"25"},{"size":588,"mtime":1607785933051,"results":"27","hashOfConfig":"25"},{"size":2445,"mtime":1607787345489,"results":"28","hashOfConfig":"25"},{"size":1298,"mtime":1607785954290,"results":"29","hashOfConfig":"25"},{"size":388,"mtime":1607675515694,"results":"30","hashOfConfig":"25"},{"size":5073,"mtime":1607871019935,"results":"31","hashOfConfig":"25"},{"size":1063,"mtime":1607787528298,"results":"32","hashOfConfig":"25"},{"size":8370,"mtime":1607828098450,"results":"33","hashOfConfig":"25"},{"size":4722,"mtime":1607829233088,"results":"34","hashOfConfig":"25"},{"size":682,"mtime":1607875274574,"results":"35","hashOfConfig":"25"},{"size":176,"mtime":1607675515694,"results":"36","hashOfConfig":"25"},{"size":530,"mtime":1607669530711,"results":"37","hashOfConfig":"25"},{"size":599,"mtime":1607870882220,"results":"38","hashOfConfig":"25"},{"size":2591,"mtime":1607829014722,"results":"39","hashOfConfig":"25"},{"size":210,"mtime":1607521376956,"results":"40","hashOfConfig":"25"},{"size":1762,"mtime":1607669463014,"results":"41","hashOfConfig":"25"},{"size":281,"mtime":1607675515694,"results":"42","hashOfConfig":"25"},{"size":558,"mtime":1607675515694,"results":"43","hashOfConfig":"25"},{"size":2106,"mtime":1607785554846,"results":"44","hashOfConfig":"25"},{"size":1153,"mtime":1607749242279,"results":"45","hashOfConfig":"25"},{"size":1122,"mtime":1607749261182,"results":"46","hashOfConfig":"25"},{"size":160,"mtime":1607828335285,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"149hmup",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/index.js",[],["96","97"],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/reportWebVitals.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/App.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Navbar.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Main.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/index.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Aggregate.js",["98"],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Map.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Allocation.js",["99"],"import React from \"react\"\nimport DistrictComponent from \"./DistrictComponent\"\nimport FilterFormAllocation from \"./filterFormAllocation\";\nimport Error from \"./Error\"\n\nclass Allocation extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            sourceDist: \"\",\n            transferType: \"\"\n        }\n    }\n\n    handleFilters = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    componentDidMount() {\n        window.scrollTo(0, 0)\n    }\n\n    handleReset= (event) => {\n        event.preventDefault();\n        this.props.history.push(\"/\");\n    }\n    render(){\n        const {currentState} = this.props;\n        if(!currentState.isActive){\n            return(\n                <div className=\"container-fluid text-center justify-content-center\">\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    <h1>Provide Data First!</h1>\n                    <button onClick={this.handleReset} className=\"btn btn-lg btn-primary\">Provide Data!</button>\n                </div>\n            )\n        }\n        const answer=currentState.formData, districts=currentState.filesCSV[0], labs=currentState.filesCSV[1];\n        if(districts[0].district_id === undefined || labs[0].id === undefined){\n            return (\n                <Error></Error>\n            )\n        }\n        const table = answer.map((data, i)=> {\n            const dist = districts.find((d)=> \n                parseInt(data.source) === parseInt(d.district_id)\n            )\n            if(data.transfer_type === 0){\n                let lab, labDist;\n                lab = labs.find((d)=> \n                    parseInt(data.destination) === parseInt(d.id)\n                )\n                labDist = districts.find((d)=>parseInt(lab.district_id) === parseInt(d.district_id))\n                if(this.state.transferType !== \"\" && parseInt(this.state.transferType) === data.transfer_type){\n                    if(this.state.sourceDist !== \"\" && dist.district_name.toLowerCase().slice(0, this.state.sourceDist.length) === this.state.sourceDist.toLowerCase()){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={((lab.lab_type===0)?\"Govt. Lab\":\"Private Lab\") +\"(Lab ID: \"+lab.id+\"), \"+ labDist.district_name} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to Lab\"}\n                        ></DistrictComponent>)\n                    }\n                    else if(this.state.sourceDist === \"\"){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={((lab.lab_type===0)?\"Govt. Lab\":\"Private Lab\") +\"(Lab ID: \"+lab.id+\"), \"+ labDist.district_name} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to Lab\"}\n                        ></DistrictComponent>)\n                    }\n                }\n                else if(this.state.transferType === \"\"){\n                    if(this.state.sourceDist !== \"\" && dist.district_name.toLowerCase().slice(0, this.state.sourceDist.length) === this.state.sourceDist.toLowerCase()){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={((lab.lab_type===0)?\"Govt. Lab\":\"Private Lab\") +\"(Lab ID: \"+lab.id+\"), \"+ labDist.district_name} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to Lab\"}\n                        ></DistrictComponent>)\n                    }\n                    else if(this.state.sourceDist === \"\"){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={((lab.lab_type===0)?\"Govt. Lab\":\"Private Lab\") +\"(Lab ID: \"+lab.id+\"), \"+ labDist.district_name} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to Lab\"}\n                        ></DistrictComponent>)\n                    }\n                }\n                \n            }\n            else {\n                let lab;\n                lab = districts.find((d)=> \n                    parseInt(data.source) === parseInt(d.district_id)\n                )\n                if(this.state.transferType !== \"\" && parseInt(this.state.transferType) === data.transfer_type){\n                    if(this.state.sourceDist !== \"\" && dist.district_name.toLowerCase().slice(0, this.state.sourceDist.length) === this.state.sourceDist.toLowerCase()){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={lab.district_name + \"(District HQ)\"} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to District\"}\n                        ></DistrictComponent>)\n                    }\n                    else if(this.state.sourceDist === \"\"){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={lab.district_name + \"(District HQ)\"} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to District\"}\n                        ></DistrictComponent>)\n                    }\n                }\n                else if(this.state.transferType === \"\"){\n                    if(this.state.sourceDist !== \"\" && dist.district_name.toLowerCase().slice(0, this.state.sourceDist.length) === this.state.sourceDist.toLowerCase()){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={lab.district_name + \"(District HQ)\"} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to District\"}\n                        ></DistrictComponent>)\n                    }\n                    else if(this.state.sourceDist === \"\"){\n                        return (<DistrictComponent \n                            key={i}\n                            sourceType={\"District\"} \n                            name={dist.district_name} \n                            labAlloted={lab.district_name + \"(District HQ)\"} \n                            swabsAlloted={data.samples_transferred}\n                            remarks={\"District to District\"}\n                        ></DistrictComponent>)\n                    }\n                }  \n            }\n        })\n        return (\n            <div className=\"container-fluid\">\n                <FilterFormAllocation handleFilters={this.handleFilters}></FilterFormAllocation>\n                <div className=\"table-responsive\">\n                    <table className=\"table table-hover\">\n                        <caption>Allocation Data</caption>\n                        <thead>\n                            <tr>\n                            <th scope=\"col\">Source Type</th>\n                            <th scope=\"col\">Source</th>\n                            <th scope=\"col\">Destination</th>\n                            <th scope=\"col\">Samples Allocated</th>\n                            <th scope=\"col\">Transfer Type</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {table}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Allocation;","/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Homepage.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/actions/actions.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/reducers/reducers.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/DistrictComponent.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/LabComponent.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/MapSupp.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/loader.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/info.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/actions/api.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/store/reducers/currentState.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/MapChart.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/filterFormAllocation.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/filterFormAggregate.js",[],"/home/shahrukh/Desktop/webd/newfolderHackathon/CNI-Hackathon2020-Frontend/src/components/Error.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":45,"column":41,"nodeType":"106","messageId":"107","endLine":45,"endColumn":43},{"ruleId":"104","severity":1,"message":"105","line":45,"column":43,"nodeType":"106","messageId":"107","endLine":45,"endColumn":45},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]